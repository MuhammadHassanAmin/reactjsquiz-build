(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9786],{41984:function(e,t,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/understanding-refs-in-react-and-when-to-use-them",function(){return s(6199)}])},23862:function(e,t,s){"use strict";var n=s(85893);t.Z=e=>{let{title:t,categories:s,level:a,date:i,children:r}=e;return(0,n.jsxs)("article",{className:"p-6 px-6 md:px-10 dark:text-white rounded-lg overflow-hidden",children:[(0,n.jsxs)("header",{className:"mb-4",children:[(0,n.jsx)("h1",{className:"text-2xl md:text-4xl font-bold text-center mb-8 break-words",children:t}),(0,n.jsxs)("div",{className:"border-y border-stone-500 py-2 my-4 text-center text-xs md:text-sm break-words",children:[(0,n.jsxs)("span",{className:"block",children:["Category: ",s.join(", ")]}),(0,n.jsxs)("span",{className:"block mx-5",children:["Difficulty: ",a]}),(0,n.jsxs)("span",{className:"block",children:["Published on: ",i]})]})]}),(0,n.jsx)("div",{className:"break-words",children:r})]})}},96828:function(e,t,s){"use strict";var n=s(85893);t.Z=e=>{let{children:t}=e;return(0,n.jsx)("div",{className:"w-full overflow-x-auto max-w-[350px] md:max-w-none",children:(0,n.jsx)("pre",{className:"bg-slate-100 dark:bg-gray-700 p-4 rounded mb-4 text-slate-300",children:(0,n.jsx)("code",{className:"whitespace-pre-wrap break-words",children:t})})})}},41354:function(e,t,s){"use strict";s.d(t,{Z:function(){return u}});var n=s(85893),a=s(67294),i=s(94184),r=s.n(i),o=s(41664),c=s.n(o);let l=e=>{let{link:t,title:s,className:a}=e;return(0,n.jsx)(c(),{passHref:!0,href:t,className:"flex mb-1",children:(0,n.jsx)("span",{className:"px-2 py-1 w-full  text-sm font-medium text-gray-700 transition-colors duration-200 transform rounded dark:text-gray-200 hover:bg-gray-900 hover:text-gray-100 md:mx-2",children:s})})};var d=()=>{let[e,t]=(0,a.useState)(!1);return(0,n.jsx)("nav",{className:"bg-white shadow dark:bg-gray-800",children:(0,n.jsxs)("div",{className:"container px-6 py-3 mx-auto md:flex ",children:[(0,n.jsxs)("div",{className:"flex items-center justify-between w-full  ",children:[(0,n.jsx)(c(),{href:"/",passHref:!0,children:(0,n.jsx)("span",{className:"whitespace-nowrap text-2xl font-bold text-gray-800 transition-colors duration-200 transform dark:text-white lg:text-3xl hover:text-gray-700 dark:hover:text-gray-300",children:"React Js Quiz"})}),(0,n.jsx)("div",{className:"flex md:hidden",children:(0,n.jsx)("button",{type:"button",onClick:()=>{t(!e)},className:"text-gray-500 dark:text-gray-200 hover:text-gray-600 dark:hover:text-gray-400 focus:outline-none focus:text-gray-600 dark:focus:text-gray-400","aria-label":"toggle menu",children:(0,n.jsx)("svg",{viewBox:"0 0 24 24",className:"w-6 h-6 fill-current",children:(0,n.jsx)("path",{fillRule:"evenodd",d:"M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z"})})})})]}),(0,n.jsx)("div",{className:r()("w-full md:flex md:items-center md:justify-end",{block:e,hidden:!e}),children:(0,n.jsxs)("div",{className:"flex flex-col px-2 py-3 -mx-4 md:flex-row md:mx-0 md:py-0 text-2xl",children:[(0,n.jsx)(l,{link:"/",title:"Home",className:"w-full bg-black"}),(0,n.jsx)(l,{link:"/blog",title:"Blog"}),(0,n.jsx)(l,{link:"/privacy-policy",title:"Privacy Policy"}),(0,n.jsx)(l,{link:"/contact-us",title:"Contact Us"})]})})]})})};function u(e){return class extends a.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("header",{className:"border-b",children:(0,n.jsx)(d,{})}),(0,n.jsx)("main",{className:" flex flex-col justify-center items-center py-5 h-full",children:(0,n.jsx)(e,{...this.props})}),(0,n.jsx)("footer",{className:"bg-white dark:bg-gray-800 dark:text-white p-5 border-t-2  flex flex-col justify-center items-center ",children:(0,n.jsx)(c(),{href:"/",rel:"noopener noreferrer",children:"Powered by React JS Quiz"})})]})}constructor(e){super(e)}}}},6199:function(e,t,s){"use strict";s.r(t),s.d(t,{__N_SSG:function(){return h}});var n=s(85893),a=s(41354),i=s(96828),r=s(28974),o=s(23862);let{title:c,date:l,categories:d,level:u}=r.find(e=>6===e.id);var h=!0;t.default=(0,a.Z)(e=>{let{}=e;return(0,n.jsx)(o.Z,{title:c,categories:d,level:u,date:l,children:(0,n.jsxs)("section",{className:"max-w-4xl mx-auto p-6",children:[(0,n.jsx)("header",{children:(0,n.jsxs)("p",{className:"mb-4",children:["React is all about components and managing the state, but sometimes, you need direct access to DOM elements or a specific React component instance. This is where ",(0,n.jsx)("strong",{children:"Refs"})," come in handy. In this article, we’ll break down what Refs are, how they work, and when you should use them in your React applications."]})}),(0,n.jsxs)("section",{children:[(0,n.jsx)("h2",{className:"text-xl font-semibold mb-2",children:"What Are Refs in React?"}),(0,n.jsxs)("p",{className:"mb-4",children:["A ",(0,n.jsx)("strong",{children:"Ref"}),' is a special attribute in React that allows you to access and interact with DOM nodes directly. Unlike React’s usual "reactive" approach, where UI updates based on state changes, Refs let you get behind the scenes, offering a way to access and manipulate DOM elements imperatively.']}),(0,n.jsx)(i.Z,{children:"const inputRef = useRef(null);"}),(0,n.jsxs)("p",{className:"mb-4",children:["In the code above, the ",(0,n.jsx)("code",{children:"useRef"})," hook is used to create a Ref object that we can later attach to a DOM element. Initially, the Ref is set to ",(0,n.jsx)("code",{children:"null"}),", but when attached to a DOM node, it will reference that element."]})]}),(0,n.jsxs)("section",{children:[(0,n.jsx)("h2",{className:"text-xl font-semibold mb-2",children:"How to Use Refs in React"}),(0,n.jsx)("p",{className:"mb-4",children:"You can use Refs in React for different purposes. The most common use case is for accessing DOM elements directly without needing to use event handlers. Here’s an example where Refs are used to focus an input field."}),(0,n.jsx)(i.Z,{children:'\nfunction TextInputWithFocusButton() {\n  const inputRef = useRef(null);\n\n  const focusInput = () => {\n    inputRef.current.focus();\n  };\n\n  return (\n    <>\n      <input ref={inputRef} type="text" placeholder="Enter text here" />\n      <button onClick={focusInput}>Focus Input</button>\n    </>\n  );\n}\n        '}),(0,n.jsxs)("p",{className:"mb-4",children:["In this example, the ",(0,n.jsx)("code",{children:"inputRef"})," Ref is assigned to the input element. By calling ",(0,n.jsx)("code",{children:"inputRef.current.focus()"})," in the ",(0,n.jsx)("code",{children:"focusInput"})," function, we can directly manipulate the DOM element by focusing on the input when the button is clicked."]})]}),(0,n.jsxs)("section",{children:[(0,n.jsx)("h2",{className:"text-xl font-semibold mb-2",children:"When Should You Use Refs?"}),(0,n.jsx)("p",{className:"mb-4",children:"Refs should be used sparingly in React since they break the declarative pattern of state-driven UI updates. However, they are useful in certain situations:"}),(0,n.jsxs)("ul",{className:"list-disc pl-5 mb-4",children:[(0,n.jsxs)("li",{className:"mb-2",children:[(0,n.jsx)("strong",{children:"Managing Focus and Text Selection:"})," As demonstrated in the previous example, Refs are helpful when you need to focus or select text inside input fields programmatically."]}),(0,n.jsxs)("li",{className:"mb-2",children:[(0,n.jsx)("strong",{children:"Triggering Animations:"})," Refs can be useful when integrating third-party libraries for animations where direct DOM manipulation is necessary."]}),(0,n.jsxs)("li",{className:"mb-2",children:[(0,n.jsx)("strong",{children:"Storing Mutable Values:"})," Refs can store values that persist across renders without triggering re-renders when they are updated."]}),(0,n.jsxs)("li",{className:"mb-2",children:[(0,n.jsx)("strong",{children:"Accessing Child Components:"})," Refs allow you to call methods on child components when necessary."]})]}),(0,n.jsx)("p",{className:"mb-4",children:"Keep in mind, whenever possible, React’s declarative approach should be favored over Refs to keep your components clean and maintainable."})]}),(0,n.jsxs)("section",{children:[(0,n.jsx)("h2",{className:"text-xl font-semibold mb-2",children:"Conclusion"}),(0,n.jsx)("p",{className:"mb-4",children:"Refs in React provide a powerful way to interact directly with the DOM or a component instance. While they are extremely useful for handling scenarios that can’t be managed with state or props, they should be used with care. Keep your use of Refs limited to cases where you truly need direct DOM access, and rely on React’s declarative model for most other tasks."}),(0,n.jsx)("p",{className:"mb-4",children:"Now that you understand Refs and when to use them, you’re one step closer to mastering React!"})]})]})})})},28974:function(e){"use strict";e.exports=JSON.parse('[{"id":10,"title":"React DevTools: A Guide for Debugging Your React Apps","description":"Debugging is an essential part of developing React applications. React DevTools is a powerful browser extension that provides a set of tools to help you inspect and debug your React components. In this article, we\'ll explore the features of React DevTools and how you can use them to enhance your development workflow.","categories":["Interview","Concept","Debugging"],"date":"8 September 2024","path":"/blog/react-devtools-a-guide-for-debugging-your-react-apps","imageProps":{"alt":"laptop.svg","src":"/icons/laptop.svg"},"level":"Intermediate"},{"id":9,"title":"How to Manage Side Effects with useEffect in React","description":"Managing side effects is a crucial aspect of developing React applications. Side effects can include operations like data fetching, subscriptions, or manually changing the DOM.","categories":["Interview","Concept"],"date":"5 September 2024","path":"/blog/how-to-manage-side-effects-with-useeffect-in-react","imageProps":{"alt":"refresh.svg","src":"/icons/refresh.svg"},"level":"Beginner"},{"id":8,"title":"React Memoization Techniques: useMemo vs useCallback","description":"Memoization is a performance optimization technique used to avoid redundant calculations by storing the results of expensive function calls and reusing them when the same inputs occur again.","categories":["Interview","Concept"],"date":"1 September 2024","path":"/blog/react-memoization-techniques-usememo-vs-usecallback","imageProps":{"alt":"post-it.svg","src":"/icons/post-it.svg"},"level":"Intermediate"},{"id":7,"title":"Integrating Third-Party Libraries in React","description":" When building React applications, you’ll often need to integrate third-party libraries to enhance functionality. React’s flexibility allows seamless integration with various libraries, whether for UI, state management, or utility functions.","categories":["Interview","Concept"],"date":"25 August 2024","path":"/blog/integrating-third-party-libraries-in-react","imageProps":{"alt":"software-dvd.svg","src":"/icons/software-dvd.svg"},"level":"Beginner"},{"id":6,"title":"Understanding Refs in React and When to Use Them","description":"React is all about components and managing the state, but sometimes, you need direct access to DOM elements or a specific React component instance.","categories":["Interview","Concept"],"date":"20 August 2024","path":"/blog/understanding-refs-in-react-and-when-to-use-them","imageProps":{"alt":"model-builder-reference","src":"/icons/network.svg"},"level":"Intermediate"},{"id":5,"title":"Understanding Prop Drilling in React and How to Avoid It","description":"","categories":["Interview","Concept","Performance"],"date":"18 August 2024","path":"/blog/understanding-prop-drilling-in-react-and-how-to-avoid-it","imageProps":{"alt":"drilling-machine","src":"/icons/water-well-drilling.svg"},"level":"Intermediate"},{"id":4,"title":"React Performance Optimization Techniques","description":"Building efficient React applications is crucial for providing a smooth user experience. In this article, we’ll explore various techniques to optimize performance in React apps, ensuring that they run smoothly even as they scale.","categories":["Interview","Concept"],"date":"12 August 2024","path":"/blog/react-performance-optimization-techniques","imageProps":{"alt":"performance-svgrepo-com","src":"/icons/web-optimization.svg"},"level":"Advanced"},{"id":3,"title":"State Management in React: A Guide to useState, useReducer, and Context API","description":"State management is a crucial aspect of building dynamic React applications. Whether you\'re handling a simple counter or managing complex app-wide data, React provides a set of hooks and tools that make state management easier. In this guide, we\'ll explore three essential tools for managing state in React: useState, useReducer, and the Context API.","categories":["Interview","Concept"],"date":"11 August 2024","path":"/blog/state-management-in-react-a-guide-to-usestate-usereducer-and-context-api","imageProps":{"alt":"redux-svgrepo-com","src":"/icons/task-management.svg"},"level":"Beginner"},{"id":2,"title":"Understanding the Virtual DOM in React","description":"The Virtual DOM is one of the core concepts that sets React apart from other JavaScript libraries and frameworks. It plays a crucial role in how React updates the UI efficiently and ensures high performance.","categories":["Interview","Concept"],"date":"26 June 2024","path":"/blog/understanding-the-virtual-dom-in-react","imageProps":{"alt":"hierarchy","src":"/icons/obj.svg"},"level":"Beginner"},{"id":1,"title":"5 Fundamental React Hooks Every Developer Should Know","description":"React Hooks are an essential part of modern React development. If you\'re preparing for a job interview, it\'s crucial to understand at least the basic hooks. Here are five fundamental React Hooks you should know","categories":["Interview"],"date":"24 June 2024","path":"/blog/5-fundamental-react-hooks-every-developer-should-know","imageProps":{"alt":"Hook","src":"/icons/fishing-hook.svg"},"level":["Beginner"]}]')}},function(e){e.O(0,[1966,2888,9774,179],function(){return e(e.s=41984)}),_N_E=e.O()}]);