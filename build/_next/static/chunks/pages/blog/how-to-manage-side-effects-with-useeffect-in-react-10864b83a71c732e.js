(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[96037],{30309:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/how-to-manage-side-effects-with-useeffect-in-react",function(){return s(33219)}])},23862:function(e,n,s){"use strict";var t=s(85893);n.Z=e=>{let{title:n,categories:s,level:a,date:r,children:c}=e;return(0,t.jsxs)("article",{className:"p-6 px-6 md:px-10 dark:text-white rounded-lg overflow-hidden",children:[(0,t.jsxs)("header",{className:"mb-4",children:[(0,t.jsx)("h1",{className:"text-2xl md:text-4xl font-bold text-center mb-8 break-words",children:n}),(0,t.jsxs)("div",{className:"border-y border-stone-500 py-2 my-4 text-center text-xs md:text-sm break-words",children:[(0,t.jsxs)("span",{className:"block",children:["Category: ",s.join(", ")]}),(0,t.jsxs)("span",{className:"block mx-5",children:["Difficulty: ",a]}),(0,t.jsxs)("span",{className:"block",children:["Published on: ",r]})]})]}),(0,t.jsx)("div",{className:"break-words",children:c})]})}},96828:function(e,n,s){"use strict";var t=s(85893);n.Z=e=>{let{children:n}=e;return(0,t.jsx)("div",{className:"w-full overflow-x-auto max-w-[350px] md:max-w-none ",children:(0,t.jsx)("pre",{className:"bg-slate-100 dark:bg-gray-700 p-4 rounded mb-4 dark:text-slate-300",children:(0,t.jsx)("code",{className:"whitespace-pre-wrap break-words",children:n})})})}},25190:function(e,n,s){"use strict";s.d(n,{Z:function(){return h}});var t=s(85893),a=s(67294),r=s(94184),c=s.n(r),l=s(41664),i=s.n(l),o=JSON.parse('{"u2":"React JS Quiz","ow":[{"title":"Javascript Quiz","url":"https://javascriptquiz.app","target":"_blank","badge":"New"}]}');let d=e=>{let{link:n,title:s,className:a,target:r,badge:c}=e;return(0,t.jsx)(i(),{passHref:!0,href:n,className:"flex mb-1 relative",target:r,rel:"_blank"===r?"noopener noreferrer":void 0,children:(0,t.jsxs)("span",{className:"px-2 py-1 w-full text-sm font-medium text-gray-700 transition-colors duration-200 transform rounded dark:text-gray-200 hover:bg-gray-900 hover:text-gray-100 md:mx-2",children:[s,c&&(0,t.jsx)("span",{className:"absolute -top-1  -right-8 -z-1  px-2 text-[10px] font-bold text-white bg-yellow-500 rounded-full",children:"New"})]})})};var u=e=>{let[n,s]=(0,a.useState)(!1),r=e.siteName||o.u2,l=e.navbarLinks||o.ow||[];return(0,t.jsx)("nav",{className:"bg-white shadow dark:bg-gray-800",children:(0,t.jsxs)("div",{className:"container px-6 py-3 mx-auto md:flex ",children:[(0,t.jsxs)("div",{className:"flex items-center justify-between w-full  ",children:[(0,t.jsx)(i(),{href:"/",passHref:!0,children:(0,t.jsx)("span",{className:"whitespace-nowrap text-2xl font-bold text-gray-800 transition-colors duration-200 transform dark:text-white lg:text-3xl hover:text-gray-700 dark:hover:text-gray-300",children:r})}),(0,t.jsx)("div",{className:"flex md:hidden",children:(0,t.jsx)("button",{type:"button",onClick:()=>{s(!n)},className:"text-gray-500 dark:text-gray-200 hover:text-gray-600 dark:hover:text-gray-400 focus:outline-none focus:text-gray-600 dark:focus:text-gray-400","aria-label":"toggle menu",children:(0,t.jsx)("svg",{viewBox:"0 0 24 24",className:"w-6 h-6 fill-current",children:(0,t.jsx)("path",{fillRule:"evenodd",d:"M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z"})})})})]}),(0,t.jsx)("div",{className:c()("w-full md:flex md:items-center md:justify-end",{block:n,hidden:!n}),children:(0,t.jsxs)("div",{className:"flex flex-col px-2 py-3 -mx-4 md:flex-row md:mx-0 md:py-0 text-2xl",children:[(0,t.jsx)(d,{link:"/",title:"Home",className:"w-full bg-black"}),(0,t.jsx)(d,{link:"/blog",title:"Blog"}),(0,t.jsx)(d,{link:"/privacy-policy",title:"Privacy Policy"}),(0,t.jsx)(d,{link:"/contact-us",title:"Contact Us"}),l.map((e,n)=>(0,t.jsx)(d,{link:e.url,title:e.title,target:e.target,badge:e.badge},n))]})})]})})};function h(e){return class extends a.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("header",{className:"border-b",children:(0,t.jsx)(u,{siteName:this.props.siteName})}),(0,t.jsx)("main",{className:" flex flex-col justify-center items-center py-5 h-full",children:(0,t.jsx)(e,{...this.props})}),(0,t.jsx)("footer",{className:"bg-white dark:bg-gray-800 dark:text-white p-5 border-t-2  flex flex-col justify-center items-center "})]})}constructor(e){super(e)}}}},33219:function(e,n,s){"use strict";s.r(n),s.d(n,{__N_SSG:function(){return l}});var t=s(85893),a=s(25190),r=s(96828),c=s(23862),l=!0;n.default=(0,a.Z)(e=>{let{title:n,date:s,categories:a,level:l}=e;return(0,t.jsx)(c.Z,{title:n,categories:a,level:l,date:s,children:(0,t.jsxs)("div",{className:"container mx-auto px-4 py-8",children:[(0,t.jsxs)("p",{className:"mb-4",children:["Managing side effects is a crucial aspect of developing React applications. Side effects can include operations like data fetching, subscriptions, or manually changing the DOM. React provides the"," ",(0,t.jsx)("code",{children:"useEffect"})," hook to handle these side effects in functional components. In this article, we will explore how to use"," ",(0,t.jsx)("code",{children:"useEffect"})," effectively to manage side effects in your React applications."]}),(0,t.jsxs)("h2",{className:"text-2xl font-semibold mb-4",children:["What is ",(0,t.jsx)("code",{children:"useEffect"}),"?"]}),(0,t.jsxs)("p",{className:"mb-4",children:["The ",(0,t.jsx)("code",{children:"useEffect"})," hook is used to perform side effects in functional components. It accepts two arguments: a function to run after the render, and an optional dependency array that determines when the effect should be re-run. This hook helps you manage operations such as data fetching, subscriptions, and manually manipulating the DOM in a controlled manner."]}),(0,t.jsxs)("h2",{className:"text-2xl font-semibold mb-4",children:["Basic Usage of ",(0,t.jsx)("code",{children:"useEffect"})]}),(0,t.jsxs)("p",{className:"mb-4",children:["The simplest use of ",(0,t.jsx)("code",{children:"useEffect"})," involves providing a function that runs after every render. Here’s an example:"]}),(0,t.jsx)(r.Z,{children:"import React, { useEffect, useState } from 'react';\n\nfunction ExampleComponent() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    // Fetch data when the component mounts\n    fetch('https://api.example.com/data')\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []); // Empty dependency array means \n  this effect runs once after initial render\n\n  return <div>{data ? <pre>{JSON.stringify(data, null, 2)}</pre> : 'Loading...'}</div>;\n}"}),(0,t.jsxs)("p",{className:"mb-4",children:["In this example, the ",(0,t.jsx)("code",{children:"useEffect"})," hook fetches data from an API when the component mounts. The empty dependency array (",(0,t.jsx)("code",{children:"[]"}),") ensures that this effect runs only once, similar to"," ",(0,t.jsx)("code",{children:"componentDidMount"})," in class components."]}),(0,t.jsx)("h2",{className:"text-2xl font-semibold mb-4",children:"Dependencies and Cleanup"}),(0,t.jsxs)("p",{className:"mb-4",children:["The dependency array in ",(0,t.jsx)("code",{children:"useEffect"})," allows you to control when the effect should run. If you include variables in the dependency array, ",(0,t.jsx)("code",{children:"useEffect"})," will run the effect again whenever any of those variables change. Here’s an example:"]}),(0,t.jsx)(r.Z,{children:"import React, { useEffect, useState } from 'react';\n\nfunction ExampleComponent({ userId }) {\n  const [userData, setUserData] = useState(null);\n\n  useEffect(() => {\n    // Fetch user data whenever userId changes\n    fetch(`https://api.example.com/users/${userId}`)\n      .then(response => response.json())\n      .then(data => setUserData(data));\n  }, [userId]); // Effect depends on userId\n\n  return <div>{userData \n  ? <pre>{JSON.stringify(userData, null, 2)}</pre>\n   : 'Loading...'}</div>;\n}"}),(0,t.jsxs)("p",{className:"mb-4",children:["In this example, the ",(0,t.jsx)("code",{children:"useEffect"})," hook fetches user data whenever the ",(0,t.jsx)("code",{children:"userId"})," prop changes. The effect depends on"," ",(0,t.jsx)("code",{children:"userId"}),", so it will be re-run whenever ",(0,t.jsx)("code",{children:"userId"})," ","changes."]}),(0,t.jsx)("p",{className:"mb-4",children:"Additionally, you can perform cleanup by returning a function from the effect function. This cleanup function will be called before the component unmounts or before the effect runs again. For example:"}),(0,t.jsx)(r.Z,{children:"import React, { useEffect, useState } from 'react';\n\nfunction ExampleComponent() {\n  const [intervalId, setIntervalId] = useState(null);\n\n  useEffect(() => {\n    // Set up an interval\n    const id = setInterval(() => {\n      console.log('Interval running...');\n    }, 1000);\n    setIntervalId(id);\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(id);\n  }, []); // Empty dependency array means this effect runs once\n\n  return <div>Check the console for interval logs.</div>;\n}"}),(0,t.jsxs)("p",{className:"mb-4",children:["In this example, an interval is set up when the component mounts, and it is cleaned up when the component unmounts by calling"," ",(0,t.jsx)("code",{children:"clearInterval"}),"."]}),(0,t.jsx)("h2",{className:"text-2xl font-semibold mb-4",children:"Common Pitfalls and Best Practices"}),(0,t.jsxs)("p",{className:"mb-4",children:["Here are some common pitfalls and best practices when using"," ",(0,t.jsx)("code",{children:"useEffect"}),":"]}),(0,t.jsxs)("ul",{className:"list-disc pl-6 mb-4",children:[(0,t.jsxs)("li",{className:"mb-2",children:[(0,t.jsx)("strong",{children:"Missing Dependencies:"})," Ensure that all variables used inside ",(0,t.jsx)("code",{children:"useEffect"})," are listed in the dependency array. Failing to do so can lead to stale values or bugs."]}),(0,t.jsxs)("li",{className:"mb-2",children:[(0,t.jsx)("strong",{children:"Cleanup Functions:"})," Always include cleanup functions if you set up subscriptions or intervals to avoid memory leaks."]}),(0,t.jsxs)("li",{className:"mb-2",children:[(0,t.jsx)("strong",{children:"Multiple Effects:"})," Use multiple"," ",(0,t.jsx)("code",{children:"useEffect"})," hooks if you have different side effects. This keeps your code modular and easier to maintain."]})]}),(0,t.jsx)("p",{className:"mb-4",children:"By following these practices, you can effectively manage side effects in your React components and keep your application performant and bug-free."}),(0,t.jsx)("h2",{className:"text-2xl font-semibold mb-4",children:"Conclusion"}),(0,t.jsxs)("p",{className:"mb-4",children:["The ",(0,t.jsx)("code",{children:"useEffect"})," hook is a powerful tool for managing side effects in React functional components. By understanding how to use it properly, you can optimize your components, manage asynchronous operations, and maintain a clean and efficient codebase. Remember to handle dependencies correctly and include cleanup functions when necessary to avoid common pitfalls."]})]})})})}},function(e){e.O(0,[41966,92888,49774,40179],function(){return e(e.s=30309)}),_N_E=e.O()}]);